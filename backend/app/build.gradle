/*
 * Copyright (c) 2020. Tolgee
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id "kotlin-jpa"
    id "org.jetbrains.kotlin.kapt"
    id "kotlin-allopen"
}

group = 'io.tolgee'

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-allopen"
apply plugin: "org.jetbrains.kotlin.plugin.spring"

repositories {
    mavenCentral()
}


allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
    annotation("org.springframework.stereotype.Service")
    annotation("org.springframework.stereotype.Component")
    annotation("org.springframework.stereotype.Service")
    annotation("org.springframework.transaction.annotation.Transactional")
    annotation("org.springframework.beans.factory.annotation.Configurable")
    annotation("org.springframework.boot.test.context.SpringBootTest")
}

kotlin {
    jvmToolchain(11)
}

dependencies {
    /**
     * SPRING
     */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-hateoas"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation("org.springframework.ldap:spring-ldap-core")
    implementation("org.springframework.security:spring-security-ldap")
    implementation "org.springframework.boot:spring-boot-starter-batch"
    implementation "org.springframework.boot:spring-boot-starter-websocket"

    /**
     * SPRING DOC
     */
    implementation libs.springDocOpenApiWebMvcCore
    implementation libs.springDocOpenApiUi
    implementation libs.springDocOpenApiKotlin
    implementation libs.springDocOpenApiDataRest
    implementation libs.springDocOpenApiHateoas

    /**
     * TESTING
     */
    testImplementation libs.assertJCore
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation libs.jjwtApi
    implementation libs.jjwtImpl
    implementation libs.jjwtJackson
    implementation libs.springmockk
    implementation libs.jsonUnitAssert
    testImplementation libs.mockito
    testImplementation("io.findify:s3mock_2.13:0.2.6")
    testImplementation("io.socket:socket.io-client:1.0.1")
    testImplementation group: 'org.springframework.batch', name: 'spring-batch-test', version: '4.3.5'
    testImplementation libs.sendInBlue

    /**
     * MISC
     */
    implementation libs.sentry
    implementation libs.commonsCodec
    implementation libs.amazonS3
    implementation libs.icu4j
    implementation("org.redisson:redisson-spring-boot-starter:3.21.0")
    implementation 'org.redisson:redisson-spring-data-27:3.21.0'
    implementation("com.github.ben-manes.caffeine:caffeine:3.0.5")
    implementation libs.jacksonModuleKotlin

    /**
     * KOTLIN
     */
    implementation libs.kotlinReflect
    implementation libs.kotlinCoroutines

    /**
     * Google translation API
     */
    implementation platform(libs.googleCloud)
    implementation 'com.google.cloud:google-cloud-translate'

    /**
     * Aws translate
     */
    implementation libs.amazonTranslate

    /**
     * Conditional billing module
     */
    if (rootProject.project(":billing-app").projectDir.exists()) {
        implementation(project(':billing-app'))
    }

    /**
     * DATA MODULE
     */
    implementation(project(':data'))

    /**
     * TESTING MODULE
     */
    testImplementation(project(':testing'))

    /**
     * MISC MODULE
     */
    implementation(project(':misc'))
}

test {
    useJUnitPlatform()
    maxHeapSize = "2048m"
    //maxParallelForks = (int) (Runtime.runtime.availableProcessors() / 2 + 1)
}

task runContextRecreatingTests(type: Test, group: 'verification') {
    useJUnitPlatform {
        includeTags "contextRecreating"
    }
}

task runStandardTests(type: Test, group: 'verification') {
    useJUnitPlatform {
        excludeTags "contextRecreating"
    }
}

springBoot {
    buildInfo {
        properties {
            version = project.version
        }
    }
}

bootJar {
    archiveFileName = "tolgee-${project.version}.jar"
    manifest {
        attributes('Implementation-Version': project.version)
    }
    onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
}

def unpackTarget = "build/dependency"

task unpack(type: Copy) {
    from(zipTree(project.tasks.findByName("bootJar").outputs.files.singleFile))
    into(unpackTarget)
    if (System.getenv("SKIP_SERVER_BUILD") != "true") {
        dependsOn "bootJar"
    }
}

task addVersionFile(type: Task) {
    mustRunAfter unpack
    doLast {
        def file = new File("${project.buildDir}/dependency/BOOT-INF/classes/.VERSION")
        file.write(project.version.toString())
    }
}

project.tasks.findByName("compileKotlin").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootBuildInfo").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("compileJava").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootJarMainClassName").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
